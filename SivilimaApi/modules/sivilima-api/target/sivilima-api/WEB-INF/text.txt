<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

	<!-- This is default url to get a token from OAuth -->
	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="authenticationManager">
		<!-- <intercept-url pattern="/oauth/token" requires-channel="https"/> -->
		<intercept-url pattern="/**" method="GET" access="ROLE_DENY" />
		<intercept-url pattern="/**" method="PUT" access="ROLE_DENY" />
		<intercept-url pattern="/**" method="DELETE" access="ROLE_DENY" />	
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<!-- <port-mappings>
            <port-mapping http="80" https="443"/>
        </port-mappings> -->
	</http>

	<!-- This is where we tells spring security what URL should be protected and what roles have access to them -->
    <http use-expressions="true" auto-config="true" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint">
    	<!-- <intercept-url pattern="/api/**" requires-channel="https"/> -->
		<anonymous enabled="false" />
		<intercept-url pattern="/users/**" access="IS_AUTHENTICATED_FULLY" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<!-- <port-mappings>
            <port-mapping http="80" https="443"/>
        </port-mappings> -->
        <csrf disabled="true"/>
    </http>

	<authentication-manager id="clientAuthenticationManager">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>
	<beans:bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetails" />
	</beans:bean>	
	
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailsServiceImpl">
            <password-encoder ref="encoder"></password-encoder>
        </authentication-provider>
    </authentication-manager>
    
	<beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="big" />
		<!-- <property name="exceptionRenderer" ref="headerOnlyExceptionRender" /> -->
	</beans:bean>    
    
	<beans:bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="big/client" />
		<beans:property name="typeName" value="Basic" />
	</beans:bean>    
	<beans:bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
	</beans:bean>
    <beans:bean id="userDetailsServiceImpl" class="UserDetailsServiceImpl"></beans:bean>
	<beans:bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
    <beans:bean id="encoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <beans:constructor-arg name="strength" value="11"/>
    </beans:bean>
    
	<!-- This defined token store, we have used in memory token store for now but this can be changed to a user defined one -->
	<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />

	<!-- This is where we defined token based configurations, token validity and other things -->
	<beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="false" />
		<beans:property name="accessTokenValiditySeconds" value="-1" />
		<beans:property name="clientDetailsService" ref="clientDetails" />
	</beans:bean>

	<oauth2:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices">
		<!-- <oauth2:authorization-code /> -->
		<!-- <oauth2:implicit /> -->
		<!-- <oauth2:refresh-token /> -->
		<oauth2:client-credentials />
		<!-- <oauth2:password /> -->
	</oauth2:authorization-server>

	<oauth2:resource-server id="resourceServerFilter" resource-id="test" token-services-ref="tokenServices" />

	<oauth2:client-details-service id="clientDetails">
		<!-- client -->
		<oauth2:client client-id="ap1gie" authorized-grant-types="client_credentials"
				scope="read,write,trust" secret="ap1Gie@m1ds" />					
	
	<!-- 	<oauth2:client client-id="restapp" authorized-grant-types="password,authorization_code,refresh_token,implicit"
				secret="restapp" authorities="ROLE_APP" /> -->

	</oauth2:client-details-service>

	<global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<expression-handler ref="oauthExpressionHandler" />
	</global-method-security>

	<oauth2:expression-handler id="oauthExpressionHandler" />
	<oauth2:web-expression-handler id="oauthWebExpressionHandler" />    
    
</beans:beans>